<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>monster_health = 10;

current_player = 0; // Start with Vivian

vivian_attacking = false;
vivian_attack_time = 0;
monster_attacking = false;
monster_attack_time = 0;
attack_dx = 5;
damage_inflicted = false;

// Store initial positions
vivian_start_x = obj_vivian.x;
monster_start_x = obj_sedian_battle.x;

/* time to pause after attack */
post_attack_pause = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// change whose turn it is
current_player = (current_player + 1) % 2;

// Stop attacking
vivian_attacking = false;
vivian_attack_time = 0;
monster_attacking = false;
monster_attack_time = 0;
damage_inflicted = false;

/* show the button if player's turn */
if (current_player == 0) {
    with (obj_button) {
        clicked = false;
        visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Exit if someone dies
if (monster_health &lt;= 0) {
    room_goto(rm_forest);
} else if (global.vivian_health &lt;= 0) {
    room_goto(rm_forest);
}

// Animate the attack
if (vivian_attacking) {
    if (vivian_attack_time &lt; post_attack_pause / 2) {
        obj_vivian.x += attack_dx;
    } else if (obj_vivian.x &gt; vivian_start_x) {
        // Inflict damage
        if (!damage_inflicted) {
            monster_health -= 1;
            damage_inflicted = true;
        }
        
        // Move back to start position
        obj_vivian.x -= attack_dx;
    }
    vivian_attack_time++;
}

if (monster_attacking) {
    if (monster_attack_time &lt; post_attack_pause / 2) {
        obj_sedian_battle.x -= attack_dx;
    } else if (obj_sedian_battle.x &lt; monster_start_x) {
        // Inflict damage
        if (!damage_inflicted) {
            global.vivian_health -= 1;
            damage_inflicted = true;
        }
        
        // Move back to start position
        obj_sedian_battle.x += attack_dx;
    }
    monster_attack_time++;
}

if (alarm[0] &gt; 0) {
    // pass
} else if (current_player == 0) {
    if (obj_button.clicked) {
        alarm[0] = post_attack_pause;
        vivian_attacking = true;
    }
} else if (current_player == 1) {
    alarm[0] = post_attack_pause;
    monster_attacking = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_forest);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw HUD
x = 40;
y = 30;
dy = 40;

// Vivian
draw_set_halign(fa_left);
draw_text(x, y, "Vivian");
draw_text(x, y + dy, "Health: " + string(global.vivian_health));

// Monster
x = room_width - x;
draw_set_halign(fa_right);
draw_text(x, y, "Monster");
draw_text(x, y + dy, "Health: " + string(monster_health));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
